swagger: "2.0"
info:
  description: "Proposal for ORKG interface  for Journal creation"
  version: "1.0.0"
  title: "ORKG interface  for Journal creation"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "dulip.withanage@tib.eu"
  license:
    name: "MIT"
    url: "https://opensource.org/licenses/MIT"
host: "https://github.com/withanage/orkg/"
basePath: "/v2"
tags:
- name: "orkg"
  description: "Open Research Knowledge Graph"
  externalDocs:
    description: "Open Research Knowledge Graph"
    url: "https://www.orkg.org/orkg/"
schemes:
- "https"
- "http"
paths:
  /articles/{articleId}:
    get:
      tags:
      - "article"
      summary: "Find article by ID"
      description: "Returns a single article"
      operationId: "getArticleById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "articleId"
        in: "path"
        description: "ID of article to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/articles"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Article not found"
      security:
      - api_key: []
    post:
      tags:
      - "article"
      summary: "Updates a article in the journal with form data"
      description: ""
      operationId: "updateArticleWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "articleId"
        in: "path"
        description: "ID of article that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "formData"
        description: "Updated name of the article"
        required: false
        type: "string"
      - name: "status"
        in: "formData"
        description: "Updated status of the article"
        required: false
        type: "string"
      responses:
        "405":
          description: "Invalid input"
      security:
      - articlejournal_auth:
        - "write:articles"
        - "read:articles"
    delete:
      tags:
      - "article"
      summary: "Deletes a article"
      description: ""
      operationId: "deleteArticle"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "articleId"
        in: "path"
        description: "Article id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Article not found"
      security:
      - articlejournal_auth:
        - "write:articles"
        - "read:articles"
  /journasl/index:
    get:
      tags:
      - "journal"
      summary: "Returns journals by status"
      description: "Returns a map of status codes to quantities"
      operationId: "getIndex"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
      security:
      - api_key: []
  /journal/{journalId}:
    get:
      tags:
      - "journal"
      summary: "Find purchase order by ID"
      description: "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions"
      operationId: "getOrderById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "journalId"
        in: "path"
        description: "ID of article that needs to be fetched"
        required: true
        type: "integer"
        maximum: 10.0
        minimum: 1.0
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"
    delete:
      tags:
      - "journal"
      summary: "Delete purchase order by ID"
      description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors"
      operationId: "deleteOrder"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "journalId"
        in: "path"
        description: "ID of the order that needs to be deleted"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"

definitions:
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      articleId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  Article:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "doggie"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "article status in the journal"
        enum:
        - "available"
        - "pending"
        - "sold"
    xml:
      name: "Article"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: ""
  url: ""
